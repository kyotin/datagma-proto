syntax = "proto3";
package uaa;
option go_package = "internal/grpc";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  schemes: HTTPS;
  info: {
    version: "1.0";
  };
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  };
  security: {
    security_requirement: {
      key: "Authorization";
      value: {};
    }
  };
};

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string jwt = 1;
  string err = 2;
}

message UserRequest {
  string email = 2;
  string password = 3;
  string firstName = 4;
  string lastName = 5;
  string companyName = 6;
  string phone = 7;
  int64 credit = 8;
  int64 roleId = 9;
  string apiId = 10;
  int64 status = 11;
}

message UserResponse {
  string email = 2;
  string password = 3;
  string firstName = 4;
  string lastName = 5;
  string companyName = 6;
  string phone = 7;
  int64 credit = 8;
  int64 roleId = 9;
  string apiId = 10;
  int64 status = 11;
  string jwt = 12;
}

message ListRoleRequest {
}

message RoleResponse {
  int64 id = 1;
  string roleName = 2;
}

message ListRoleResponse {
  repeated RoleResponse roleResponse = 1;
}

message IsAPIValidRequest {
  string apiId = 1;
}

message IsAPIValidResponse {
  bool valid = 1;
}

message ChangePasswordRequest {
  string email = 1;
  string oldPassword = 2;
  string newPassword = 3;
}

message ChangePasswordResponse {
  int64 rowAffected = 1;
  bool success = 2;
}

message ListAllUserRequest {
  int64 page = 1;
  int64 limit = 2;
}

message ListAllUserResponse {
  repeated UserResponse users = 1;
}

message DeleteUserRequest {
  string email = 1;
  bool permanent = 2;
}

message DeleteUserResponse {
  bool success = 1;
}

service UAAService {

  // Login
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/uaa/v1/login"
      body: "*"
    };
  }

  // Create New User
  rpc CreateUser(UserRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/uaa/v1/user"
      body: "*"
    };
  }

  // Update Existed User (need input all field)
  rpc UpdateUser(UserRequest) returns (UserResponse) {
    option (google.api.http) = {
      put: "/api/uaa/v1/user"
      body: "*"
    };
  }

  // Change Password
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/api/uaa/v1/passwd"
      body: "*"
    };
  }

  // List All Users
  rpc ListAllUser(ListAllUserRequest) returns (ListAllUserResponse) {
    option (google.api.http) = {
      get: "/api/uaa/v1/users"
    };
  }

  // Delete User (Actually mark user inactive)
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      post: "/api/uaa/v1/drop_user"
      body: "*"
    };
  }

  // List Roles In System
  rpc ListRole(ListRoleRequest) returns (ListRoleResponse) {
    option (google.api.http) = {
      get: "/api/uaa/v1/roles"
    };
  }

  // Check API valid or not
  rpc IsAPIValid(IsAPIValidRequest) returns (IsAPIValidResponse) {
    option (google.api.http) = {
      post: "/api/uaa/v1/api_id/valid"
      body: "*"
    };
  }
}