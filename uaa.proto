syntax = "proto3";
package uaa;
option go_package = "internal/grpc";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTPS;
  info: {
    version: "1.0";
  };
  security: {
    security_requirement: {
      key: "Authorization";
      value: {};
    }
  };
};

message LoginRequest {
  string userId = 1;
  string password = 2;
}

message LoginResponse {
  string jwt = 1;
  string err = 2;
}

message CreateUserRequest {
  string id = 1;
  string email = 2;
  string password = 3;
  string firstName = 4;
  string lastName = 5;
  string companyName = 6;
  string phone = 7;
  int64 credit = 8;
  int64 roleId = 9;
}

message CreateUserResponse {
  string id = 1;
  string mesg = 2;
}

message CreateRoleRequest {
  string roleName = 1;
}

message ListRoleRequest {}

message RoleResponse {
  int64 id = 1;
  string roleName = 2;
}

message ListRoleResponse {
  repeated RoleResponse roleResponse = 1;
}

message CreateRoleResponse {
  int32 id = 1;
  string roleName = 2;
  string mesg = 3;
}

message CreateClientRequest {

}

message CreateClientResponse {
  string clientId = 1;
  string clientSecret = 2;
  string apiId = 3;
}

message IsAPIValidRequest {
  string apiId = 1;
}

message IsAPIValieResponse {
  bool valid = 1;
}

service UAAService {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/uaa/login"
      body: "*"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/uaa/user"
      body: "*"
    };
  }

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/api/v1/uaa/role"
      body: "*"
    };
  }

  rpc ListRole(ListRoleRequest) returns (ListRoleResponse) {
    option (google.api.http) = {
      get: "/api/v1/uaa/roles"
    };
  }

  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse) {
    option (google.api.http) = {
      post: "/api/v1/uaa/client"
      body: "*"
    };
  }

  rpc IsAPIValid(IsAPIValidRequest) returns (IsAPIValieResponse) {
    option (google.api.http) = {
      post: "/api/v1/uaa/api/valid"
      body: "*"

    };
  }
}