syntax = "proto3";
package ingress;
option go_package = "internal/grpc";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "external/datagma-proto/finder.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  schemes: HTTPS;
  info: {
    version: "1.0";
  };
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  };
  security: {
    security_requirement: {
      key: "Authorization";
      value: {};
    }
  };
};

message FullApiRequest {
  string apiId = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Your API key",
  }];

  string data = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "A professional email address or a LinkedIn profile URL. A successful response costs 2 credits",
  }];

  bool companyInfo = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To let us choose the fastest way between companyFull and companyPremium. Useful when you only want basic infos about company (like locations, size-range, industry...)",
    default: "true"
  }];

  bool companyPremium = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get the LinkedIn information about the enriched person's company. A successful response costs 5 credits",
    default: "false"
  }];

  bool companyFull = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get financial information about the company of the enriched person. A successful response costs 10 credits",
    default: "false"
  }];

  bool companyBasic = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get the minimum infos about the enriched person's company. A successful response costs 2 credits",
    default: "false"
  }];

  bool companyFrench = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get the information of the SIREN directory if the company is French. A successful response costs 2 credits",
    default: "false"
  }];

  bool findEmail = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get the verified work email address of the enriched person if you don't submit one in input. A successful response costs 10 credits",
    default: "false"
  }];

  bool personFull = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "To get the full profile of the person(education, past experiences...). A successful response costs 5 credits",
  }];

  string firstName = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Replace the data parameter if you don't use it. (Must be used with lastName and company). A successful response with this schema costs 2 credits",
  }];

  string lastName = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Replace the data parameter if you don't use it. (Must be used with firstName and company). A successful response with this schema costs 2 credits",
  }];

  string company = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Replace the data parameter if you don't fill it. (Must be used with firstName and lastName). A successful response with this schema costs 2 credits",
  }];

  bool phone = 13;
  bool companyPhone = 14;
  bool similarWeb = 15;
}

message FullApiResponse {
  finder.GetPhoneNumberResponse phone = 1;
  finder.GetEmailResponse email = 2;
  Person person = 3;
  Company company = 4;
}

message SimilarWeb {
  message AdNetworks {
    int64 count = 1;
    message Data {
      repeated string item = 1;
    }
    repeated Data data = 2;
  }
  AdNetworks addNetworks = 1;

  message TrafficSources {
    float direct = 1;
    float referrals = 2;
    float search = 3;
    float social = 4;
    float mail = 5;
    float paidReferrals = 6;
  }
  TrafficSources trafficSources = 2;

  string category = 3;

  message SimilarSite {
    string site = 1;
    string altImage = 2;
    string imageUrl = 3;
    string iconUrl = 4;
    string ellipsiseName = 5;
    int64 rank = 6;
    bool isBlackListed = 7;
  }
  repeated SimilarSite similarSites = 4;

  message TopCountryShare {
    repeated float item = 1;
  }
  repeated TopCountryShare topCountryShares = 5;
}

message Company {
  BasicCompany basic = 4;
  FrenchCompany french = 1;
  FullCompany full = 5;
  PremiumCompany premium = 6;
  CompanyYellowPage phone = 3;
  repeated string technologies = 7;
  repeated string technologiesCategories = 8;
  SimilarWeb similarWeb = 9;
}

message CompanyYellowPage {
  string formatted_phone_number = 1;
  string formatted_address = 2;
  message Geometry {
    message Location {
      float lat = 1;
      float lng = 2;
    }
    Location location = 1;

    message Viewport {
      Location northeast = 1;
      Location southwest = 2;
    }
    Viewport viewport = 2;
  }
  Geometry geometry = 3;
  string vicinity = 4;
}

message BasicCompany {
  string name = 1;
  string website = 2;
  string year_founded = 3;
  string industry = 4;
  int32 size = 5;
  string locality = 6;
  string region = 7;
  string country = 8;
  string linked_url = 9;
}

// model.paper
message FrenchCompany {
  string siren = 1;
  string nom_entreprise = 2;
  string code_naf = 3;
  string libelle_code_naf = 4;
  string domaine_activite = 6;
  string objet_social = 7;
  string date_creation_formate = 8;
  bool entreprise_cessee = 9;
  string effectif = 10;
  string numero_tva_intracommunautaire = 11;

  message Seige {
    string siret = 1;
    string adresse_ligne_1 = 2;
    string code_postal = 3;
    string ville = 4;
  }
  Seige siege = 12;

  message Representant {
    string nom_complet = 1;
    string date_de_naissance_formate = 2;
    int64 age = 3;
  }
  repeated Representant representants = 13;
}

// model.crunchbase
message FullCompany {
  message Properties {
    string revenue_range = 1;
    string  title = 2;
    string short_description = 3;
    message Identifier {
      string permalink = 1;
    }
    Identifier identifier = 4;
  }
  Properties properties = 1;

  message Cards {
    message FundingRoundsSummary {
      message FundingTotal {
        float value_usd = 1;
        string value_usd_pretty = 2;
        string value_usd_roundup = 3;
      }
      FundingTotal funding_total = 1;
      string last_funding_type = 2;
      string last_funding_at = 3;
      int64 num_funding_rounds = 4;
    }
    FundingRoundsSummary funding_rounds_summary = 1;

    message SemrushRankHeadline {
        int64 semrush_visits_latest_month = 1;
        float semrush_visits_mom_pct = 2;
    }
    SemrushRankHeadline semrush_rank_headline = 2;

    message AberdeenSummary {
      message AberdeenSiteItSpend {
       float value_usd = 1;
      }
      AberdeenSiteItSpend aberdeen_site_it_spend = 1;
    }
    AberdeenSummary aberdeen_summary = 3;

    message OverviewCompanyFields{
      string company_type = 1;
    }
    OverviewCompanyFields overview_company_fields = 4;

    message OverviewFields {
      float revenue_range = 1;
      string num_employees_enum = 2;
      string num_employee = 10;
      string last_funding_type = 3;
      string operating_status = 4;

      message FoundedOn {
        string value = 1;
      }
      FoundedOn founded_on = 5;

      message Category {
       string value = 1;
      }
      repeated Category categories = 6;

      string       legal_name = 7;
      string       funding_stage = 8;

      message LocationGroupIdentifiers {
        string value = 1;
      }
      repeated LocationGroupIdentifiers location_group_identifiers = 9;
    }
    OverviewFields overview_fields = 9;

    message OverviewFields2  {
      message Website {
       string value = 1;
      }
      Website            website = 1;

      message CrunchbaseLinkedIn {
        string value = 1;
      }
      CrunchbaseLinkedIn linkedin = 2;

      message Twitter {
        string value = 1;
      }
      Twitter twitter = 3;
      string contact_email = 4;

      message Facebook {
        string value = 1;
      }
      Facebook facebook = 5;
    }
    OverviewFields2 overview_fields2 = 6;

    message FundingRoundList {
      message MoneyRaised {
        int64 value = 1;
        string currency = 2;
        int64 value_usd = 3;
        string value_usd_pretty = 4;
        string value_usd_roundup = 5;
      }
      MoneyRaised money_raised = 1;
    }
    repeated FundingRoundList funding_rounds_list = 7;

    message SemrushSummary {
      int64 semrush_global_rank = 1;
      int64 semrush_visits_latest_month = 2;
    }
    SemrushSummary semrush_summary = 8;

    message IPOSummary {
      message StockLink {
        string label = 1;
        string value = 2;
      }
      StockLink stock_link = 1;
      string went_public_on = 2;
    }
    IPOSummary ipo_summary = 10;
  }
  Cards cards = 2;

  float score = 3;
}

message PremiumCompany {
  string url = 1;
  string name = 2;
  string sphere = 3;
  //int32 followers = 3;
  string employeesAmountInLinkedin = 4;
  string about = 5;

  string headquaterAddr = 6;
  string headquaterAddrStreet = 7;
  string headquaterAddrPostalCode = 8;
  string headquaterAddrLocality = 9;
  string headquaterAddrRegion = 10;
  string headquaterAddrCountry = 11;
  message Subsidiary {
    string subsidiary = 1;
    string firstPart = 2;
    string secondpart = 3;
  }
  repeated Subsidiary subsidiary = 12;
  string numberOfLocation = 13;

  message Employee {
    string img = 1;
    string title = 2;
    string subtitle = 3;
  }
  repeated Employee employees = 14;

  string website = 15;
  string industries = 16;
  string companySize = 17;
  string headquarters = 18;
  string type = 19;
  string founded = 20;
  string specialties = 21;

  message Speciality {
    string value = 1;
  }
  repeated Speciality specialtiesArr = 22;

  message Update {
    string title = 1;
    string time = 2;
    string text = 3;
    string likes_count = 4;
    string comments_count = 5;
  }
  repeated Update updates = 23;

  message Input {
    string url = 1;
  }
  Input input = 24;

  //string followers = 25;
  string companyId = 26;

  repeated string locations = 27;

  float score = 28;
}

message Person {
  BasicPerson basic = 1;
  PremiumPerson data = 2;
}

message BasicPerson {
  string name = 1;
  string firstName = 2;
  string lastName = 3;
  string location = 4;
  string jobTitle = 5;
  string company = 6;
  string linkedInUrl = 7;
  string extractedRole = 8;
  string extractedSeniority = 9;
  string extractedGender = 10;
  string dateDeNaissanceFormate = 11;
  string age = 12;
}

message PremiumPerson {
  string name = 1;
  string position = 2;

  message CurrentCompany {
    string name = 1;
    string link = 2;
  }
  CurrentCompany current_company = 3;

  string avatar = 4;
  string about = 5;
  string city = 6;
  // string following = 7;
  string educations_details = 8;

  message Post {
    string image = 1;
    string title = 2;
    string attribuion = 3;
  }
  repeated Post posts = 9;

  message Experience {
    string company = 1;
    string duration = 2;
    message Position {
      string title = 1;
      string meta = 2;
    }
    repeated Position positions = 3;
    string title = 4;
    string subtitle = 5;
    string location = 6;
    string description = 7;
  }
  repeated Experience experience = 10;

  message Education {
    string title = 1;
    string subtitle = 2;
    string meta = 3;
  }
  repeated Education education = 11;

  message Certification {
    string title = 1;
    string subtitle = 2;
    string meta = 3;
  }
  repeated Certification certifications = 12;

  message Course {
    string title = 1;
    string subtitle = 2;
    string meta = 3;
  }
  repeated Course courses = 13;

  message Language {
    string title = 1;
    string subtitle = 2;
    string meta = 3;
  }
  repeated Language languages = 14;

  message Group {
    string title = 1;
    string subtitle = 2;
    string meta = 3;
    string img = 4;
  }
  repeated Group groups = 15;

  message Input {
    string url = 1;
  }
  Input input = 16;

  string from = 17;
}

message Empty {

}

message LuminatiCallback {
  bytes data = 1;
}

message FindPhoneRequest {
  string apiId = 1;
  string data = 2;
}

message FindFacebookNumberRequest {
  string uid = 1;
}

message FindFacebookNumberResponse {
  string number = 1;
}

message StellaRequest {
  string firstName = 1;
  string lastName = 2;
  string companyName = 3;
  string apiId = 4;
  string jobTitle =5;
  string email = 6;
}

message StellaResponse {
  message Data {
    string firstName = 1;
    string lastName = 2;
    string name = 3;
    string linkedIn = 4;
    string currentCompany = 5;
    string title = 6;
    message Experience {
      string company = 1;
      string jobTitle = 2;
      string duration = 3;
    }
    repeated Experience experiences = 7;
    bool ableToGetPastExperience = 8;
    bool ableToFindCompanyInputInProfile = 9;
    string from = 10;
  }
  Data data = 1;

  string status = 2;
}

message GoogleScrapeRequest {
  string country = 1;
  string query = 2;
  string apiId = 3;
}

message GoogleScrapeResponse {
  repeated Person persons = 1;
}

message CompanyEnrichRequest {
  string name = 1;
  string website = 2;
  string siren = 3;
  string companyFrenchHint = 4;
  string apiId = 5;
  bool companyBasic = 6;
  bool companyFrench = 7;
  bool companyPremium = 8;
  bool companyFull = 9;
  bool companyInfo = 10;
  bool companyPhone = 11;
  bool similarWeb = 12;
}

service IngressService {
  // FullApi
  rpc FullApi(FullApiRequest) returns (FullApiResponse) {
    option (google.api.http) = {
      get: "/api/ingress/v1/full"
    };
  }

  rpc CompanyEnrich(CompanyEnrichRequest) returns (Company) {
    option (google.api.http) = {
      get: "/api/ingress/v1/company"
    };
  }

  rpc GoogleScrape(GoogleScrapeRequest) returns (GoogleScrapeResponse) {
    option (google.api.http) = {
      get: "/api/ingress/v1/google"
    };
  }

  rpc FindPhone(FindPhoneRequest) returns (finder.GetPhoneNumberResponse) {
    option (google.api.http) = {
      get: "/api/ingress/v1/phone"
    };
  }

  rpc FindFacebookNumberByUID(FindFacebookNumberRequest) returns (FindFacebookNumberResponse) {
    option (google.api.http) = {
      get: "/api/ingress/v1/fbnumber"
    };
  }

  rpc HandlePersonCallback(LuminatiCallback) returns (Empty){}

  rpc HandleCompanyCallback(LuminatiCallback) returns (Empty){}

  rpc StellaUpdate(StellaRequest) returns (StellaResponse){
    option (google.api.http) = {
      get: "/api/ingress/v1/update"
    };
  }

  rpc StellaUpdateV2(StellaRequest) returns (StellaResponse){
    option (google.api.http) = {
      get: "/api/ingress/v2/update"
    };
  }
}
